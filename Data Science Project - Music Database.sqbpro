-- What are the Top 100 Tracks to Appear in the Most Playlists? --
WITH playlist_tracks_join AS (SELECT *
FROM playlist_track
LEFT JOIN tracks
	ON playlist_track.TrackId = tracks.TrackID)
	
SELECT TrackId, Name, COUNT(PlaylistId) AS 'Number of Playlists'
FROM playlist_tracks_join
GROUP BY TrackId
ORDER BY COUNT(PlaylistId) DESC
LIMIT 100;


-- Which Track Generated the Most Revenue? --
SELECT invoice_items.TrackId, tracks.name, SUM(invoice_items.UnitPrice) AS 'Total Revenue'
FROM invoice_items
INNER JOIN tracks
	ON invoice_items.TrackId = tracks.TrackId
GROUP BY invoice_items.TrackId
ORDER BY SUM(invoice_items.UnitPrice) DESC
LIMIT 1;

-- Which Album Generated the Most Revenue? -- 
SELECT albums.AlbumId, albums.Title, SUM(invoice_items.UnitPrice) AS 'Total Revenue'
FROM invoice_items
INNER JOIN tracks
	ON invoice_items.TrackId = tracks.TrackId
INNER JOIN albums
	ON tracks.AlbumId = albums.AlbumId
GROUP BY tracks.AlbumId
ORDER BY SUM(invoice_items.UnitPrice) DESC
LIMIT 1;

-- Which Genre Generated the Most Revenue? --
SELECT genres.GenreId, genres.Name, SUM(invoice_items.UnitPrice) AS 'Total Revenue'
FROM invoice_items
INNER JOIN tracks
	ON invoice_items.TrackId = tracks.TrackId
INNER JOIN genres
	ON tracks.GenreId = genres.GenreId
GROUP BY tracks.GenreId
ORDER BY SUM(invoice_items.UnitPrice) DESC
LIMIT 1;

-- Which Countries Generated the Most Revenue? --
SELECT invoices.BillingCountry AS 'Country', SUM(invoices.Total) AS 'Total Revenue'
FROM invoices
GROUP BY invoices.BillingCountry
ORDER BY SUM(invoices.Total) DESC
LIMIT 10;

-- What is the Country % of Total Revenue? --
SELECT 
	invoices.BillingCountry,
	ROUND(SUM(invoices.Total),2) AS 'Total Revenue',
	ROUND(SUM(invoices.Total) * 100 /
	(SELECT SUM(invoices.Total) FROM invoices),2) AS '% of Overall Total Revenue'
FROM invoices
GROUP BY invoices.BillingCountry
ORDER BY SUM(invoices.Total) DESC;

-- How Many Customers Did Each Employee Support? --
SELECT employees.EmployeeId, employees.FirstName AS 'Employee First Name', employees.LastName AS 'Employee Last Name',
	COUNT(customers.CustomerId) AS 'Number of Customers Supported'
FROM employees
LEFT JOIN customers
	ON employees.EmployeeId = customers.SupportRepId
GROUP BY employees.EmployeeId
ORDER BY 4 DESC;

-- What is Each Employee's Total Revenue and Average Revenue? --
SELECT employees.EmployeeId, employees.FirstName AS 'Employee First Name', employees.LastName AS 'Employee Last Name', 
	ROUND(AVG(invoices.Total), 1) AS 'Average Sales Revenue', ROUND(SUM(invoices.Total), 1) AS 'Total Revenue'
FROM employees
INNER JOIN customers
	ON employees.EmployeeId = customers.SupportRepId
INNER JOIN invoices
		ON customers.CustomerId = invoices.CustomerId
GROUP BY employees.EmployeeId;		

-- Do Longer or Shorter Albums Generate More Revenue? --

WITH album_length AS(SELECT tracks.albumId AS 'AlbumId',
	COUNT(*) AS 'Number of Tracks'
FROM tracks
GROUP BY 1)

SELECT album_length.'Number of Tracks',
	COUNT(DISTINCT album_length.AlbumId) AS 'Total Number of Albums',
	ROUND(SUM(invoice_items.UnitPrice),2) AS 'Total Revenue of Albums',
	ROUND(SUM(invoice_items.UnitPrice)/COUNT(DISTINCT album_length.AlbumId),2) AS 'Average Revenue Per Album'
FROM invoice_items
JOIN tracks
	ON tracks.TrackId = invoice_items.TrackId
JOIN album_length
	ON album_length.AlbumId = tracks.AlbumId
GROUP BY 1;

-- Do Number of Playlist Appearances Affect Revenue? --
WITH playlist_appearances AS 
(SELECT tracks.TrackId, tracks.Name AS 'Track Name', COUNT(tracks.TrackId) AS 'Number of Playlist Appearances'
FROM playlist_track
JOIN tracks
	ON playlist_track.TrackId = tracks.TrackId
GROUP BY 1)

SELECT playlist_appearances.'Number of Playlist Appearances', 
	COUNT(DISTINCT(playlist_appearances.TrackId)) AS 'Number of Tracks',
	ROUND(SUM(invoice_items.UnitPrice), 2) AS 'Total Track Revenue',
	ROUND(SUM(invoice_items.UnitPrice)/COUNT(DISTINCT(playlist_appearances.TrackId)), 2) AS 'Average Revenue Per Track'
FROM playlist_appearances
JOIN invoice_items
	ON playlist_appearances.TrackId = invoice_items.TrackId
GROUP BY 1;

-- Year on Year Revenue and % Change --
WITH revenue AS 
(SELECT 
	CAST(strftime('%Y', invoices.InvoiceDate) AS int)-1 AS 'Previous Year',
	CAST(strftime('%Y', invoices.InvoiceDate) AS int) AS 'Current Year',
	ROUND(SUM(invoices.Total),2) AS 'Total Revenue'
FROM invoices
GROUP BY 2)

SELECT 
cur.'Previous Year',
prev.'Total Revenue',
cur.'Current Year',
cur.'Total Revenue',
	ROUND((cur.'Total Revenue' - prev.'Total Revenue')/prev.'Total Revenue' * 100, 2) AS '% Change'
FROM revenue cur
JOIN revenue prev
	ON prev.'Current Year' = cur.'Previous Year';
